{"version":3,"file":"static/js/499.69c8617f.chunk.js","mappings":"qRAEaA,EAAOC,EAAAA,GAAAA,GAAH,4IASJC,EAAQD,EAAAA,GAAAA,EAAH,gIAQLE,EAAOF,EAAAA,GAAAA,EAAH,yF,SCwBjB,EAtCgB,WACd,OAA8BG,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAEMC,GADWC,EAAAA,EAAAA,MACQC,MAAMC,GAmB/B,OAjBAC,EAAAA,EAAAA,YAAU,WACR,GAAKJ,EAAL,CAIA,IAAMK,EAAY,mCAAG,8GAEMC,EAAAA,EAAAA,IAAeN,GAFrB,OAEXO,EAFW,OAGjBR,EAAWQ,EAASC,SAHH,gDAKjBC,QAAQC,IAAR,MALiB,yDAAH,qDASlBL,GAXC,CAYF,GAAE,CAACL,KAGF,wBACGF,GAAWA,EAAQa,OAAS,EAC3Bb,EAAQc,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACV,UAACrB,EAAD,YACE,UAACE,EAAD,sBAAgBkB,MAChB,SAACjB,EAAD,UAAOkB,MAFED,EADD,KAOZ,sEAIP,C,kMCvCKE,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAmB,mCAAG,WAAMC,GAAN,2FAEzBC,EAFyB,qCAEgBJ,EAFhB,gCAE+CG,GAF/C,SAGAF,EAAAA,EAAAA,IAAUG,GAHV,uBAGjBC,EAHiB,EAGvBC,KAHuB,kBAIxBD,GAJwB,sCAMzB,IAAIE,MAAJ,MANyB,yDAAH,sDAUnBC,EAAY,mCAAG,WAAMC,GAAN,2FAElBL,EAFkB,+BAEiBJ,EAFjB,iCAEiDS,GAFjD,SAGOR,EAAAA,EAAAA,IAAUG,GAHjB,uBAGVC,EAHU,EAGhBC,KAHgB,kBAIjBD,GAJiB,sCAMlB,IAAIE,MAAJ,MANkB,yDAAH,sDAUZG,EAAe,mCAAG,WAAMzB,GAAN,2FAErBmB,EAFqB,gBAEDnB,EAFC,oBAEkBe,EAFlB,4BAGJC,EAAAA,EAAAA,IAAUG,GAHN,uBAGnBE,EAHmB,EAGnBA,KAHmB,kBAIpBA,GAJoB,sCAMrB,IAAIC,MAAJ,MANqB,yDAAH,sDAUfI,EAAe,mCAAG,WAAM1B,GAAN,2FAErBmB,EAFqB,gBAEDnB,EAFC,4BAE0Be,EAF1B,4BAGJC,EAAAA,EAAAA,IAAUG,GAHN,uBAGnBE,EAHmB,EAGnBA,KAHmB,kBAIpBA,GAJoB,sCAMrB,IAAIC,MAAJ,MANqB,yDAAH,sDAUfhB,EAAc,mCAAG,WAAMN,GAAN,2FAEpBmB,EAFoB,gBAEAnB,EAFA,4BAE2Be,EAF3B,4BAGHC,EAAAA,EAAAA,IAAUG,GAHP,uBAGlBE,EAHkB,EAGlBA,KAHkB,kBAInBA,GAJmB,sCAMpB,IAAIC,MAAJ,MANoB,yDAAH,qD","sources":["pages/Reviews/Reviews.styled.jsx","pages/Reviews/Reviews.jsx","services/api.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  width: 100%;\n  margin-bottom: 15px;\n  padding: 5px;\n`;\n\nexport const Title = styled.p`\n  font-size: 1.4rem;\n  font-weight: 700;\n  text-align: left;\n  width: 100%;\n  white-space: nowrap;\n`;\n\nexport const Text = styled.p`\n  font-size: 1rem;\n  font-weight: 400;\n  text-align: justify;\n`;\n","import { getMovieReview } from 'services/api';\nimport { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Item, Text, Title } from './Reviews.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const location = useLocation();\n  const movieId = location.state.id;\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n\n    const fetchReviews = async () => {\n      try {\n        const response = await getMovieReview(movieId);\n        setReviews(response.results);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <ul>\n      {reviews && reviews.length > 0 ? (\n        reviews.map(({ author, content }) => (\n          <Item key={author}>\n            <Title>Author: {author}</Title>\n            <Text>{content}</Text>\n          </Item>\n        ))\n      ) : (\n        <p>We don't have any reviews for this movie.</p>\n      )}\n    </ul>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = '917494deecf020090f46312c9c574dbd';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingMovies = async page => {\n  try {\n    const queryStr = `trending/movie/day?api_key=${API_KEY}&language=en-US&page=${page}`;\n    const { data: movies } = await axios.get(queryStr);\n    return movies;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const searchMovies = async query => {\n  try {\n    const queryStr = `search/movie?api_key=${API_KEY}&language=en-US&query=${query}`;\n    const { data: movies } = await axios.get(queryStr);\n    return movies;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const getMovieDetails = async movieId => {\n  try {\n    const queryStr = `movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n    const { data } = await axios.get(queryStr);\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const getMovieCredits = async movieId => {\n  try {\n    const queryStr = `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`;\n    const { data } = await axios.get(queryStr);\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const getMovieReview = async movieId => {\n  try {\n    const queryStr = `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`;\n    const { data } = await axios.get(queryStr);\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n"],"names":["Item","styled","Title","Text","useState","reviews","setReviews","movieId","useLocation","state","id","useEffect","fetchReviews","getMovieReview","response","results","console","log","length","map","author","content","API_KEY","axios","fetchTrendingMovies","page","queryStr","movies","data","Error","searchMovies","query","getMovieDetails","getMovieCredits"],"sourceRoot":""}